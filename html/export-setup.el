;; Load a specific version of org, to avoid depending on the user local config
(add-to-list 'load-path "build/deps/org")
(add-to-list 'load-path "build/deps/htmlize")

;; Quell warning from Org export
(setq python-indent-guess-indent-offset nil)

(with-eval-after-load 'org
  ;; Tell Org how to export 'cite' links
  ;; XXX: This is actually overridden by ox-bibtex.
  (defun fmdkdd/org-export-cite (path desc format)
    (when (eq format 'html)
      (format "<a href=\"#%s\">%s</a>" path path)))

  (org-add-link-type "cite" nil #'fmdkdd/org-export-cite))

(with-eval-after-load 'ox-html
  ;; Produce figcaption elements, the only way to identify caption in the CSS.
  (setq org-html-html5-fancy t)

  ;; No validation link in postamble
  (setq org-html-postamble t
        org-html-postamble-format
        '(("fr"
           "<p class=\"author\">Auteur: %a</p>\n<p class=\"created\">Crée: %T (%c)</p>")))

  ;; Minimal MathJax.
  (setq org-html-mathjax-template
        "<script type=\"text/x-mathjax-config\">
  MathJax.Hub.Config({
    jax: [\"input/TeX\",\"output/SVG\", \"output/PreviewHTML\"],
    extensions: [\"tex2jax.js\",\"AssistiveMML.js\"],
    positionToHash: false,
  });
</script>
<script type=\"text/javascript\" async
        src=\"https://cdn.mathjax.org/mathjax/latest/MathJax.js\"></script>")

  ;; When exporting SRC blocks, put CSS classes for syntax highlighting, but do
  ;; not set any style inline.  We can do that in style.css if needed.
  (setq org-html-htmlize-output-type 'css)

  ;; Do not embed SVG image in <object> tag.  An <img> works better.
  (defun org-html--format-image (source attributes info)
    "Return \"img\" tag with given SOURCE and ATTRIBUTES.
SOURCE is a string specifying the location of the image.
ATTRIBUTES is a plist, as returned by
`org-export-read-attribute'.  INFO is a plist used as
a communication channel."
    (org-html-close-tag
     "img"
     (org-html--make-attribute-string
      (org-combine-plists
       (list :src source
             :alt (if (string-match-p "^ltxpng/" source)
                      (org-html-encode-plain-text
                       (org-find-text-property-in-string 'org-latex-src source))
                    (file-name-nondirectory source)))
       attributes))
     info))

  ;; Includes bibliography of cited references in HTML export using bibtex2html.
  (require 'ox-bibtex))

(with-eval-after-load 'ox-bibtex

  ;; Modifications to the original function:
  ;; #1. Read the HTML produced by bibtex2html as utf-8 to correctly handle the
  ;; accents in the .bib file.
  ;; #2. Add -nobibsource argument to prevent bibtex2html from producing the
  ;; refs_bib.html file
  ;; #3. Delete the refs.html file generated by bibtex2html after it is loaded into a temp buffer.
  ;; #4. Remove the "References" h2 text since I define my own headline in Org.
  ;; #5. Parse links in CAPTION by passing the WITH-AFFILIATED option to `org-element-map'.
  (defun org-bibtex-process-bib-files (tree backend info)
    "Send each bibliography in parse tree to \"bibtex2html\" process.
Return new parse tree."
    (when (org-export-derived-backend-p backend 'ascii 'html)
      ;; Initialize dynamically scoped variables.  The first one
      ;; contain an alist between keyword objects and their HTML
      ;; translation.  The second one will contain an alist between
      ;; citation keys and names in the output (according to style).
      (setq org-bibtex-html-entries-alist nil
            org-bibtex-html-keywords-alist nil)
      (org-element-map tree 'keyword
        (lambda (keyword)
          (when (equal (org-element-property :key keyword) "BIBLIOGRAPHY")
            (let ((arguments (org-bibtex-get-arguments keyword))
                  (file (org-bibtex-get-file keyword))
                  temp-file
                  out-file
                  (coding-system-for-read 'utf-8) ; #1 My bib file contains
                                        ; utf-8 encoded accents.  Bibtex2html
                                        ; creates an HTML file with the accents
                                        ; as is (good).  But somehow the
                                        ; resulting file is in an unknown
                                        ; encoding for `file'.  This confuses
                                        ; `insert-file-contents', which we use
                                        ; here to load the HTML into a temp
                                        ; buffer.  So we help by specifying we
                                        ; want to read that HTML file as utf-8.
                  )
              ;; Test if filename is given with .bib-extension and strip
              ;; it off. Filenames with another extensions will be
              ;; untouched and will finally rise an error in bibtex2html.
              (setq file (if (equal (file-name-extension file) "bib")
                             (file-name-sans-extension file) file))
              ;; Outpufiles of bibtex2html will be put into current working directory
              ;; so define a variable for this.
              (setq out-file (file-name-sans-extension
                              (file-name-nondirectory file)))
              ;; limit is set: collect citations throughout the document
              ;; in TEMP-FILE and pass it to "bibtex2html" as "-citefile"
              ;; argument.
              (when (plist-get arguments :limit)
                (let ((citations
                       (org-element-map tree '(latex-fragment link)
                         (lambda (object)
                           (and (org-bibtex-citation-p object)
                                (org-bibtex-get-citation-key object)))
                         nil nil nil t))) ; #5
                  (with-temp-file (setq temp-file (make-temp-file "ox-bibtex"))
                    (insert (mapconcat 'identity citations "\n")))
                  (setq arguments
                        (plist-put arguments
                                   :options
                                   (append (plist-get arguments :options)
                                           (list "-citefile" temp-file))))))
              ;; Call "bibtex2html" on specified file.
              (unless (eq 0 (apply
                             'call-process
                             (append '("bibtex2html" nil nil nil)
                                     '("-a" "-nodoc" "-noheader" "-nofooter" "-nobibsource") ; #2
                                     (let ((style
                                            (org-not-nil
                                             (org-bibtex-get-style keyword))))
                                       (and style (list "--style" style)))
                                     (plist-get arguments :options)
                                     (list (concat file ".bib")))))
                (error "Executing bibtex2html failed"))
              (and temp-file (delete-file temp-file))
              ;; Open produced HTML file, and collect Bibtex key names
              (with-temp-buffer
                (insert-file-contents (concat out-file ".html"))
                ;; Update `org-bibtex-html-entries-alist'.
                (goto-char (point-min))
                (while (re-search-forward
                        "a name=\"\\([-_a-zA-Z0-9:]+\\)\">\\(\\w+\\)" nil t)
                  (push (cons (match-string 1) (match-string 2))
                        org-bibtex-html-entries-alist)))
              ;; Open produced HTML file, wrap references within a block and
              ;; return it.
              (with-temp-buffer
                (cond
                 ((org-export-derived-backend-p backend 'html)
                  (insert "<div id=\"bibliography\">\n<h2>Bibliographie</h2>\n")
                  ;; (insert "<div id=\"bibliography\">\n") ; #4
                  (insert-file-contents (concat out-file ".html"))
                  (goto-char (point-max))
                  (insert "\n</div>")
                  ;; #3 and remove the HTML file generated by bibtex2html
                 (delete-file (concat out-file ".html")))
                 ((org-export-derived-backend-p backend 'ascii)
                  ;; convert HTML references to text w/pandoc
                  (unless (eq 0 (call-process "pandoc" nil nil nil
                                              (concat out-file ".html")
                                              "-o"
                                              (concat out-file ".txt")))
                    (error "Executing pandoc failed"))
                  (insert
                   (format
                    "%s\n==========\n\n"
                    (org-export-translate
                     "References"
                     (intern (format ":%s" (plist-get info :ascii-charset)))
                     info)))
                  (insert-file-contents (concat out-file ".txt"))
                  (goto-char (point-min))
                  (while (re-search-forward
                          "\\[ \\[bib\\][^ ]+ \\(\\]\\||[\n\r]\\)" nil t)
                    (replace-match ""))
                  (goto-char (point-min))
                  (while (re-search-forward "\\( \\]\\| \\]\\| |\\)" nil t)
                    (replace-match ""))
                  (goto-char (point-min))
                  (while (re-search-forward "[\n\r]\\([\n\r][\n\r]\\)" nil t)
                    (replace-match "\\1"))))
                ;; Update `org-bibtex-html-keywords-alist'.
                (push (cons keyword (buffer-string))
                      org-bibtex-html-keywords-alist)))))))
    ;; Return parse tree unchanged.
    tree)
  )

;; Allow Babel to execute source blocks in batch mode.
(with-eval-after-load 'ob-core
  (require 'ob-js)
  (require 'ob-dot)
  (setq org-confirm-babel-evaluate nil
        org-babel-use-quick-and-dirty-noweb-expansion t))
